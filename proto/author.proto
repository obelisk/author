syntax = "proto3";
package author;

// Identities are pieces of data that Author can use to determine
// who is asking for authorization when it is happening through
// a proxy service. For example, when someone requests access through
// the editor `Rustica`, identities the following from the requesting client
// are sent through the `AuthorizeRequest` call:
//  Source IP
//  mTLS Identity data
//  SSH key fingerprint

// Important To Note
// The `identities` is not checked for correctness (though it may have other
// heurisitics applied to it). It should only contain data that has been
// verified by the editor.

message AuthorizeRequest {
    map<string, string> identities = 1;
    map<string, string> authorization_request = 2;
}

message AuthorizeResponse {
    map<string, string> approval_response = 1;
}

// This call adds data into Author for use in further authorization requests.
// For example, when a user adds a new key via the editor `Rustica`, it feeds
// into this.
message AddIdentityDataRequest {
    map<string, string> identities = 1;
    map<string, string> identity_data = 2;
}

message AddIdentityDataResponse {}

message Authorization {
    string auth_type = 1;
    string resource = 2;
}

message SetPermissionsOnSSHKeyRequest {
    map<string, string> identities = 1;
    string fingerprint = 2;
    bool ssh_enabled = 3;
    bool use_owner_as_principal = 4;
    bool can_create_host_certs = 5;
    bool can_create_user_certs = 6;
    bool host_unrestricted = 7;
    bool principal_unrestricted = 8;
    uint64 max_creation_time = 9;
    map<string, string> extensions = 10;
    bool use_force_command = 11;
    string force_command = 12;
    bool force_source_ip = 13;
    bool set_authorizations = 14;
    repeated Authorization authorizations = 15;
}

message SetPermissionsOnSSHKeyResponse {}


message ModifySSHKeyAuthorizationsRequest {
    map<string, string> identities = 1;
    string fingerprint = 2;
    string action = 3;
    repeated Authorization authorizations = 4;
}

message ModifySSHKeyAuthorizationsResponse {}

message ListRegisteredKeysRequest {
    map<string, string> identities = 1;
    string query = 2;
    uint64 limit = 3;
}

message SSHKey {
    string fingerprint = 1;
    string user = 2;
    string pin_policy = 3;
    string touch_policy = 4;
    string serial = 5;
    string firmware = 6;
    string attestation_certificate = 7;
    string attestation_intermediate = 8;
    bool ssh_enabled = 9;
    bool use_owner_as_principal = 10;
    bool can_create_host_certs = 11;
    bool can_create_user_certs = 12;
    bool host_unrestricted = 13;
    bool principal_unrestricted = 14;
    uint64 max_creation_time = 15;
    bool use_force_command = 16;
    string force_command = 17;
    bool force_source_ip = 18;
    repeated Authorization authorizations = 19;
}

message ListRegisteredKeysResponse {
    repeated SSHKey keys = 1;
}

message AddPropertyToIdentityRequest {
    map<string, string> identities = 1;
}

message AddPropertyToIdentityResponse {}

service Author {
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);
    rpc AddIdentityData(AddIdentityDataRequest) returns (AddIdentityDataResponse);
    rpc SetPermissionsOnSSHKey(SetPermissionsOnSSHKeyRequest) returns (SetPermissionsOnSSHKeyResponse);
    rpc ModifySSHKeyAuthorizations(ModifySSHKeyAuthorizationsRequest) returns (ModifySSHKeyAuthorizationsResponse);
    rpc ListRegisteredKeys(ListRegisteredKeysRequest) returns (ListRegisteredKeysResponse);
    //rpc AddPropertyToIdentity(AddPropertyToIdentityRequest) returns (AddPropertyToIdentityResponse);
}